#!/usr/bin/env node
'use strict';

const fs = require('fs');
const showdown = require('showdown');
const converter = new showdown.Converter({
	tables: true,
	simpleLineBreaks: true,
	requireSpaceBeforeHeadingText: true,
	simplifiedAutoLink: true,
	literalMidWordUnderscores: true,
	literalMidWordAsterisks: true,
	openLinksInNewWindow: true,
});

process.chdir(__dirname);

process.stdout.write("Generating articles... ");

const files = fs.readdirSync('../articles/');
// const template = '' + fs.readFileSync('template.html');

const searchIndex = require('../../play.pokemonshowdown.com/data/search-index.js').BattleSearchIndex;
const searchIndexTable = {};
for (const [id, type, more] of searchIndex) {
	if (more) continue;
	if (!searchIndexTable[id]) {
		searchIndexTable[id] = [type];
	} else {
		searchIndexTable[id].push(type);
	}
}
function idCanBe(id, type) {
	if (!id.endsWith(type)) return false;
	const entry = searchIndexTable[id.slice(0, -type.length)];
	return !!(entry && entry.includes(type));
}
function toID(text) {
	// this is a duplicate of Dex.getId, for performance reasons
	if (text && text.id) {
		text = text.id;
	} else if (text && text.userid) {
		text = text.userid;
	}
	if (typeof text !== 'string' && typeof text !== 'number') return '';
	return ('' + text).toLowerCase().replace(/[^a-z0-9]+/g, '');
}
function pluralType(type) {
	if (type === 'move') return 'moves';
	if (type === 'ability') return 'abilities';
	if (type === 'item') return 'items';
	if (type === 'type') return 'types';
	if (type === 'category') return 'categories';
	if (type === 'egggroup') return 'egggroups';
	if (type === 'tier') return 'tiers';
	if (type === 'article') return 'articles';
	return type;
}

for (const file of files) {
	if (!file.endsWith('.md')) continue;
	if (/[A-Z]/.test(file)) continue;
	let buf = '' + fs.readFileSync('../articles/' + file);
	const name = file.slice(0, -3);
	const nlIndex = buf.indexOf('\n');
	// const title = buf.slice(2, nlIndex);
	const secondHashIndex = buf.indexOf('\n# ');
	if (secondHashIndex > 0 && buf.slice(nlIndex, secondHashIndex).trim() === '') {
		buf = buf.slice(secondHashIndex + 1);
	}
	buf = converter.makeHtml(buf);
	// buf = buf.replace(/<a href="http/g, `<a target="_blank" href="http`);

	// buf = template.replace('{title}', title).replace('{content}', buf);
	buf = buf.replace(`<a href="/${name}">`, `<a href="/${name}" class="cur">`);
	// showdown (the Markdown parser) doesn't convert Unicode to entities automatically
	buf = buf.replace(/Ã©/g, '&eacute;');

	buf = buf.replace(/\[\[([^\]]+)\]\]/g, (match, submatch) => {
		let id = toID(submatch);
		let types = searchIndexTable[id];
		if (idCanBe(id, 'type')) {
			id = id.slice(0, -4);
			types = ['type'];
		}
		if (idCanBe(id, 'move')) {
			id = id.slice(0, -4);
			types = ['move'];
		}
		if (idCanBe(id, 'egggroup')) {
			id = id.slice(0, -4);
			types = ['egggroup'];
		}
		if (!types) {
			return `${submatch} (?)`;
		} else if (types.length === 1) {
			return `<a href="/${pluralType(types[0])}/${id}" data-target="push">${submatch}</a>`;
		} else {
			return `${submatch} (` + types.map(type => `<a href="/${pluralType(type)}/${id}" data-target="push">${type}</a>`).join(`, `) + `)`;
		}
	});

	buf = buf.replace(/>Past gens<\/h3>([^]*)/, (match, submatch) => {
		let subBuf = '>Past gens<\/h3>\n<dl>\n';
		let isFirst = true;
		for (const line of submatch.split('\n')) {
			if (line.endsWith(':</p>')) {
				if (!isFirst) subBuf += '</dd>';
				isFirst = false;
				subBuf += '<dt>' + line.slice(3, -4) + '</dt><dd>\n';
			} else {
				subBuf += line + '\n';
			}
		}
		if (!isFirst) subBuf += '</dd>';
		subBuf += '\n</dl>';
		return subBuf;
	});

	buf = buf.replace(/\n/g, '\n\t\t').replace(/\n\t\t\n/g, '\n\n');

	fs.writeFileSync('../.articles-cached/' + name + '.html', buf);
}

console.log("DONE");
